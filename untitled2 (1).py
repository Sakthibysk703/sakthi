# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nOTzWJyt5RMAp87X2o_OsEjpZRnB7CwL
"""



import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from io import BytesIO
import datetime

# Page config
st.set_page_config(page_title="Diabetic Foot Pressure Grading", layout="centered")
st.title("🦶 Diabetic Foot Pressure Grading (3-Sensor Dataset)")

# File uploader
uploaded_file = st.file_uploader("Upload pressure sensor data (.xlsx)", type=["xlsx"])

# Upload foot image
uploaded_image = st.file_uploader("Upload Foot Image (e.g., silhouette or photo)", type=["jpg", "png", "jpeg"])

# Grading function
def grade_pressure(value):
    if value < 30:
        return "Grade 1 (Low)"
    elif value < 70:
        return "Grade 2 (Moderate)"
    else:
        return "Grade 3 (High)"

# Data processing
def process_data(df):
    for sensor in ["Sensor 1", "Sensor 2", "Sensor 3"]:
        df[f"{sensor}_Grade"] = df[sensor].apply(grade_pressure)
    df["Mean_Pressure"] = df[["Sensor 1", "Sensor 2", "Sensor 3"]].mean(axis=1)
    df["Overall_Grade"] = df["Mean_Pressure"].apply(grade_pressure)
    return df

# Pressure points overlay on foot image
def draw_pressure_on_foot(image, sensor1, sensor2, sensor3):
    max_val = 1023
    heel_intensity = sensor1 / max_val
    ball_intensity = sensor2 / max_val
    toe_intensity = sensor3 / max_val

    fig, ax = plt.subplots(figsize=(6, 10))
    ax.imshow(image)

    # Overlay pressure points
    ax.scatter(1, 2, color=plt.cm.Reds(heel_intensity), s=100, label="Heel")
    ax.scatter(1, 4, color=plt.cm.Reds(ball_intensity), s=100, label="Ball")
    ax.scatter(1, 6, color=plt.cm.Reds(toe_intensity), s=100, label="Toe")

    ax.set_xlim(0, 2)
    ax.set_ylim(0, 7)
    ax.axis('off')
    ax.legend()
    st.pyplot(fig)

# Main logic
if uploaded_file is not None and uploaded_image is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("✅ File uploaded successfully!")
        st.write("📄 Raw Data:", df.head())

        image = Image.open(uploaded_image)
        st.image(image, caption="Uploaded Foot Image", use_column_width=True)

        required_cols = ["Sensor 1", "Sensor 2", "Sensor 3"]
        if all(col in df.columns for col in required_cols):
            with st.spinner("Processing data..."):
                processed_df = process_data(df)

            st.subheader("🩺 Grading Result")
            st.dataframe(processed_df)

            # Sensor-wise Pie Charts
            st.subheader("🥧 Sensor-wise Grade Distribution (Pie Charts)")
            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("**Sensor 1**")
                sensor1_counts = processed_df["Sensor 1_Grade"].value_counts()
                fig1, ax1 = plt.subplots()
                ax1.pie(sensor1_counts, labels=sensor1_counts.index, autopct='%1.1f%%', startangle=90)
                ax1.axis('equal')
                st.pyplot(fig1)

            with col2:
                st.markdown("**Sensor 2**")
                sensor2_counts = processed_df["Sensor 2_Grade"].value_counts()
                fig2, ax2 = plt.subplots()
                ax2.pie(sensor2_counts, labels=sensor2_counts.index, autopct='%1.1f%%', startangle=90)
                ax2.axis('equal')
                st.pyplot(fig2)

            with col3:
                st.markdown("**Sensor 3**")
                sensor3_counts = processed_df["Sensor 3_Grade"].value_counts()
                fig3, ax3 = plt.subplots()
                ax3.pie(sensor3_counts, labels=sensor3_counts.index, autopct='%1.1f%%', startangle=90)
                ax3.axis('equal')
                st.pyplot(fig3)

            # Pressure map for last sample
            if not processed_df.empty:
                last_sample = processed_df.iloc[-1]
                st.subheader("🦶 Right Foot Pressure Map")
                draw_pressure_on_foot(image, last_sample["Sensor 1"], last_sample["Sensor 2"], last_sample["Sensor 3"])

            # Download button with timestamped file name
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output = BytesIO()
            processed_df.to_excel(output, index=False)
            output.seek(0)
            st.download_button(
                label="📥 Download Graded Excel",
                data=output,
                file_name=f"graded_output_{timestamp}.xlsx"
            )
        else:
            st.error("❌ Required columns: 'Sensor 1', 'Sensor 2', and 'Sensor 3'")

    except Exception as e:
        st.error(f"⚠️ Error: {e}")