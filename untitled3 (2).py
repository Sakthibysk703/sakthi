# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iRArfOEClbbNaWaAevl91y6AqTZFh56o
"""



import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Foot Pressure Grading + Risk Alerts", layout="wide")
st.title("🦶 Diabetic Foot Pressure Grading & Risk Monitoring")

uploaded_file = st.file_uploader("📤 Upload a Patient's Excel File (.xlsx)", type="xlsx")

# Pressure grading function
def grade_pressure(value):
    if value < 30:
        return "Grade 1 (Low)"
    elif value < 70:
        return "Grade 2 (Moderate)"
    else:
        return "Grade 3 (High)"

# Grading + Risk Evaluation
def process_dataset(df):
    for sensor in ["Sensor1", "Sensor2", "Sensor3"]:
        df[f"{sensor}_Grade"] = df[sensor].apply(grade_pressure)
    df["Mean_Pressure"] = df[["Sensor1", "Sensor2", "Sensor3"]].mean(axis=1)
    df["Overall_Grade"] = df["Mean_Pressure"].apply(grade_pressure)
    return df

# Risk rule
def check_risk(row):
    high_grades = sum(row[f"{s}_Grade"] == "Grade 3 (High)" for s in ["Sensor1", "Sensor2", "Sensor3"])
    return row["Mean_Pressure"] >= 70 or high_grades >= 2

# Pie chart helper
def plot_pie(data, title):
    fig = px.pie(data, names=data.index, values=data.values, title=title, hole=0.3)
    st.plotly_chart(fig, use_container_width=True)

# Trend chart
def plot_trend(df):
    fig = px.line(df[["Sensor1", "Sensor2", "Sensor3"]],
                  labels={"index": "Sample", "value": "Pressure", "variable": "Sensor"},
                  title="📈 Pressure Trend")
    st.plotly_chart(fig, use_container_width=True)

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.subheader(f"📝 Patient File: {uploaded_file.name}")

        if not {"Sensor1", "Sensor2", "Sensor3"}.issubset(df.columns):
            st.error("❌ Required columns (Sensor1, Sensor2, Sensor3) are missing in the file.")
        else:
            result_df = process_dataset(df)

            # Show trend chart
            plot_trend(result_df)

            # Show data table
            st.dataframe(result_df, use_container_width=True)

            # Pie charts
            st.markdown("#### 📊 Grade Distributions")
            col1, col2 = st.columns(2)
            with col1:
                plot_pie(result_df["Sensor1_Grade"].value_counts(), "Sensor1 Grades")
            with col2:
                plot_pie(result_df["Sensor2_Grade"].value_counts(), "Sensor2 Grades")
            col3, col4 = st.columns(2)
            with col3:
                plot_pie(result_df["Sensor3_Grade"].value_counts(), "Sensor3 Grades")
            with col4:
                plot_pie(result_df["Overall_Grade"].value_counts(), "Overall Grades")

            # Risk detection
            risky_rows = result_df[result_df.apply(check_risk, axis=1)]
            if not risky_rows.empty:
                st.subheader("🚨 High-Risk Samples Detected")
                st.write(f"{len(risky_rows)} high-risk sample(s) found.")
                st.dataframe(risky_rows)
            else:
                st.success("✅ No high-risk samples detected.")

            # Download option
            csv = result_df.to_csv(index=False).encode("utf-8")
            st.download_button("📥 Download Graded CSV", data=csv,
                               file_name=f"graded_{uploaded_file.name.replace('.xlsx', '.csv')}", mime="text/csv")

    except Exception as e:
        st.error(f"❌ Error processing file: {e}")