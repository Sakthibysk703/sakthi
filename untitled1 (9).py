# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZnLERPVMMBxVhSLFI09hNYhTxCp9Vval
"""



import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import time
import numpy as np
from PIL import Image

# Page config
st.set_page_config(page_title="Diabetic Foot Pressure Grading", layout="centered")
st.title("🦶 Diabetic Foot Pressure Grading (3-Sensor Dataset)")

# File uploader
uploaded_file = st.file_uploader("Upload pressure sensor data (.xlsx)", type=["xlsx"])

# Upload foot image
uploaded_image = st.file_uploader("Upload Foot Image (e.g., silhouette or photo)", type=["jpg", "png", "jpeg"])

# Grading function
def grade_pressure(value):
    if value < 30:
        return "Grade 1 (Low)"
    elif value < 70:
        return "Grade 2 (Moderate)"
    else:
        return "Grade 3 (High)"

# Data processing
def process_data(df):
    for sensor in ["Sensor 1", "Sensor 2", "Sensor 3"]:
        df[f"{sensor}_Grade"] = df[sensor].apply(grade_pressure)
    df["Mean_Pressure"] = df[["Sensor 1", "Sensor 2", "Sensor 3"]].mean(axis=1)
    df["Overall_Grade"] = df["Mean_Pressure"].apply(grade_pressure)
    return df

# Pressure points overlay on foot image
def draw_pressure_on_foot(image, sensor1, sensor2, sensor3):
    max_val = 1023  # Adjust this if the sensor readings are scaled differently
    heel_intensity = sensor1 / max_val
    ball_intensity = sensor2 / max_val
    toe_intensity = sensor3 / max_val

    # Create figure with the foot image
    fig, ax = plt.subplots(figsize=(6, 10))
    ax.imshow(image)  # Show the foot image

    # Overlay pressure points with corresponding intensity
    ax.scatter(1, 2, color=plt.cm.Reds(heel_intensity), s=100, label="Heel")  # Heel position (adjust as needed)
    ax.scatter(1, 4, color=plt.cm.Reds(ball_intensity), s=100, label="Ball")  # Ball position (adjust as needed)
    ax.scatter(1, 6, color=plt.cm.Reds(toe_intensity), s=100, label="Toe")  # Toe position (adjust as needed)

    ax.set_xlim(0, 2)
    ax.set_ylim(0, 7)
    ax.axis('off')  # Hide axes for better visualization

    # Add legend
    ax.legend()

    # Display the image with overlays
    st.pyplot(fig)

# Main logic
if uploaded_file is not None and uploaded_image is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("✅ File uploaded successfully!")
        st.write("📄 Raw Data:", df.head())

        # Open and show the foot image
        image = Image.open(uploaded_image)
        st.image(image, caption="Uploaded Foot Image", use_column_width=True)

        required_cols = ["Sensor 1", "Sensor 2", "Sensor 3"]
        if all(col in df.columns for col in required_cols):
            processed_df = process_data(df)

            st.subheader("🩺 Grading Result")
            st.dataframe(processed_df)

            # Displaying the pressure points on the foot image for the last sample
            if not processed_df.empty:
                last_sample = processed_df.iloc[-1]

                # Show pressure overlay on foot image
                st.subheader("🦶 Right Foot Pressure Map")
                draw_pressure_on_foot(image, last_sample["Sensor 1"], last_sample["Sensor 2"], last_sample["Sensor 3"])

            # Download button
            output_file = "graded_output.xlsx"
            processed_df.to_excel(output_file, index=False)
            with open(output_file, "rb") as f:
                st.download_button("📥 Download Graded Excel", data=f, file_name="graded_output.xlsx")

        else:
            st.error("❌ Required columns: 'Sensor 1', 'Sensor 2', and 'Sensor 3'")

    except Exception as e:
        st.error(f"⚠️ Error: {e}")

